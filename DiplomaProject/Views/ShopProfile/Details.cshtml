@model DiplomaProject.Models.ShopProfile

@{
    ViewData["Title"] = "Details";
}

<h1 class="text-center secondary-color pt-2">Детальна інформація</h1>

<div class="text-center">
    <h4 class="primary-color">Деталі магазину</h4>
    <hr/>

    <div class="image-center pb-5 image-style">
        <img src="data:image/jpeg;base64,@Convert.ToBase64String(Model.LogoPhoto)" alt="LogoPhoto" class="shop-image-style"/>
    </div>


    <table class="table table-striped">
        <tbody>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayFor(model => model.Name)
            </th>
        </tr>

        <tr>
            <th>
                @Html.DisplayNameFor(model => model.IsVerified)
            </th>
            <th>
                @if (Model.IsVerified)
                {
                    <i class="fa-solid fa-check text-success fa-2x"></i>
                }
                else
                {
                    <i class="fa-solid fa-xmark text-danger fa-2x"></i>
                }
            </th>
        </tr>

        <tr>
            <th>
                @Html.DisplayNameFor(model => model.City)
            </th>
            <th>
                @Html.DisplayFor(model => model.City)
            </th>
        </tr>

        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Address)
            </th>
            <th>
                @Html.DisplayFor(model => model.Address)
            </th>
        </tr>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th>
                @Html.DisplayFor(model => model.Description)
            </th>
        </tr>

        @await Component.InvokeAsync("ShopOrdersInfo",new {shopProfileId = Model.Id})
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Contacts)
            </th>
            <th>
                @Html.DisplayFor(model => model.Contacts)
            </th>
        </tr>

        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Salesman)
            </th>
            <th>
                @Html.DisplayFor(model => model.Salesman.Name)
            </th>
        </tr>

        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Products)
            </th>
            <th>
            @*     @Html.ActionLink("Товари магазину", "Index", "Product", new { shopProfileId = Model.Id }, null) *@
                <a class="btn btn-warning" asp-controller="Product" asp-action="ShopProfileProductsIndex" asp-route-shopProfileId="@Model.Id">Товари</a>
            </th>
        </tr>
    </table>
</div>
<div class="text-center">
    @if (!Model.IsVerified && User.IsInRole("admin"))
    {
        <a class="btn btn-success" role="button" asp-action="VerifyShopProfile" asp-route-id="@Model?.Id">
            <i class="fa-solid fa-check"></i>
            Верифікувати сторінку
        </a>
    }
</div>

@if (User.Identity.IsAuthenticated)
{
    <div class="btn btn-secondary" id="leave-comment">
        @* @Html.ActionLink("Залишити коментар", "Create", "ShopComment", new { shopProfileId = Model.Id }, ) *@
        <a asp-action="Create" asp-controller="ShopComment" asp-route-shopProfileId="@Model.Id" class="btn btn-secondary">Залишити коментар</a>
    </div>
}

<div class="pt-5">
    @await Component.InvokeAsync("ShopCommentsList", new {shopProfileId = Model.Id})
</div>


@if (Model.Salesman.Email == User.Identity.Name)
{
    <div class="d-flex align-items-center">
        <a class="btn btn-warning" asp-action="Index" asp-controller="Order" asp-route-shopProfileId="@Model?.Id">Замовлення магазину</a>
        <a class="btn btn-primary" asp-action="Edit" asp-route-id="@Model?.Id">Редагувати</a>
        <a class="btn btn-success" asp-action="Create" asp-controller="Product" asp-route-shopProfileId="@Model.Id">Додати товар</a>
    </div>
    <table class="columns">
        <tr>
            <td>
                <div id="piechart_div" style="border: 1px solid #ccc"></div>
            </td>
            <td>
                <div id="barchart_div" style="border: 1px solid #ccc"></div>
            </td>
        </tr>
    </table>
}

<div class="d-flex align-items-center">
    <a class="btn btn-info left" asp-action="Index">Back to List</a>
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script>
google.charts.load('current', { 'packages': ['corechart'] });
        $(document).ready(function () {
            $.ajax({
                type: 'GET',
                dataType: "json",
                contentType: "application/json",
                url: '/Charts/OrdersEstimations/@Model.Id',
                success: function (result) {
                    // google.charts.load('current', {
                    //     'packages': ['corechart']
                    // });
                    google.charts.setOnLoadCallback(function () {
                        drawPieChart(result);
                    });
                }
            });

            function drawPieChart(mydata) {
                data = google.visualization.arrayToDataTable(mydata, false);
                var options = {
                    title: "Співвідношення оцінок замовлень",
                    width: 500,
                    height: 400
                    }
                    
                    var piechart = new google.visualization.PieChart(document.getElementById('piechart_div'));
                    piechart.draw(data, options);      
            }
            
            $.ajax({
                            type: 'GET',
                            dataType: "json",
                            contentType: "application/json",
                            url: '/Charts/OrdersAmountPerDay/@Model.Id',
                            success: function (result) {
                                // google.charts.load('current', {
                                //     'packages': ['corechart']
                                // });
                                google.charts.setOnLoadCallback(function () {
                                    drawBarChart(result);
                                });
                            }
                        });
            
            function drawBarChart(mydata) {
                            data = google.visualization.arrayToDataTable(mydata, false);
                            var options = {
                                title: "Надійшло замовлень за 1 день",
                                width: 500,
                                height: 400
                                }
                                
                                var barchart = new google.visualization.ColumnChart(document.getElementById('barchart_div'));
                                barchart.draw(data, options);      
                        }
            
        });
    </script>